dX <- r*(1 - X / Kx)*X - w * X * Y / (X + K)
dY <- s * (1 - J * Y / X)*Y
list(c(dX, dY))
})
}
# Parameters and initial states
parameters_ht <- c(r = 2.5, s = 0.225, w = 5, J = 2,Kx = 300, K = 50)
state_ht <- c(X = 50, Y = 60)
times_ht <- seq(0, 100, by = 0.1)
# Solve the system
out_ht <- ode(y = state_ht, times = times_ht,
func = holling_tanner, parms = parameters_ht,
method = "bdf")
# Plot time-series dynamics
#par(mfrow = c(1, 2)) # Arrange plots in 1 row, 2 columns
plot(out_ht[, "time"], out_ht[, "X"], type = "l", col = "blue", lwd = 2,
xlab = "Time", ylab = "Prey (X), Predator (Y)", main = "Predator-Prey Dynamics")
abline(h = 100, col = "blue")
lines(out_ht[, "time"], out_ht[, "Y"], col = "red", lwd = 2, lty = 2)
abline(h = 50, col = "red")
legend("topright", legend = c("Prey (X)", "Predator (Y)"), col = c("blue", "red"), lty = c(1, 2))
# Plot phase space (analogous to Fig. 6.17)
plot(out_ht[, "X"], out_ht[, "Y"], type = "l", xlab = "Prey Population (X)", ylab = "Predator Population (Y)",
main = "Holling-Tanner Predator-Prey Model", col = "purple", lwd = 2)
grid()
##############################################################################
### Lorenz Model #####
##############################################################################
# Define the Lorenz model
lorenz <- function(t, state, parameters) {
with(as.list(c(state, parameters)), {
dx <- a * (y - x)
dy <- b*x - y - x*z
dz <- x * y - c * z
list(c(dx, dy, dz))
})
}
# Parameters and initial states
parameters_lorenz <- c(a = 10, b = 28, c = 8 / 3)
state_lorenz <- c(x = -11.3, y = -13.3, z = 28)
times_lorenz <- seq(0, 50, by = 0.01)
# Solve the system
out_lorenz <- ode(y = state_lorenz, times = times_lorenz, func = lorenz, parms = parameters_lorenz)
# Plot time-series dynamics
par(mfrow = c(2, 2)) # Arrange plots in 2 rows, 2 columns
plot(out_lorenz[, "time"], out_lorenz[, "x"], type = "l", col = "blue", lwd = 2,
xlab = "Time", ylab = "x", main = "Lorenz Dynamics (x)")
plot(out_lorenz[, "time"], out_lorenz[, "y"], type = "l", col = "red", lwd = 2,
xlab = "Time", ylab = "y", main = "Lorenz Dynamics (y)")
plot(out_lorenz[, "time"], out_lorenz[, "z"], type = "l", col = "green", lwd = 2,
xlab = "Time", ylab = "z", main = "Lorenz Dynamics (z)")
# Plot Lorenz attractor (analogous to Fig. 6.20)
scatterplot3d(out_lorenz[, "x"], out_lorenz[, "y"], out_lorenz[, "z"], type = "l", color = "darkorange",
xlab = "x", ylab = "y", zlab = "z", main = "Lorenz Attractor")
##############################################################################
# In this script, we use approaches from Systems Analysis, Imboden and Pfenninger,
# Chapter 6 - Nonlinear Models with One Variable, to describe the growth behavior
# in the number of bacteria over time.
#
# Author: Victor Garcia, ZHAW
##############################################################################
##############################################################################
### Data exploration, visualization, wrangling and programming philosophy ############
##############################################################################
# Following Hadley Wickham's philosophy on data exploration and visualization:
# https://r4ds.had.co.nz/tidy-data.html
##############################################################################
### Preparations ############
##############################################################################
# Online compiler for testing: https://www.mycompiler.io/new/r
# Or use: https://rdrr.io/snippets/
##############################################################################
### Topic: Hysteresis in Water Transparency in Lakes ############
##############################################################################
# Modeling the dynamics of water transparency under nutrient input.
##############################################################################
### Load Libraries ############
##############################################################################
library(ggplot2)
library(tidyverse)
library(deSolve)
##############################################################################
### Task 1: Define Parameters and Plot f(B) ############
##############################################################################
# Parameters
J_N <- 15         # Nutrient input rate
alpha <- 0.5      # Reduction coefficient when B > B_crit
B_crit <- 5       # Critical turbidity level
elimination_power <- 2
f_s <- function(B) { 0.5 * B^elimination_power }  # Phytoplankton elimination function
# Define f(B)
f_B <- function(B) {
ifelse(B <= B_crit, -f_s(B), -alpha * f_s(B))
}
# Generate Data
turbidity_states <- seq(0, 10, by = 0.1)
elimination_func <- data.frame(B = turbidity_states,
elimination_rate = sapply(turbidity_states, f_B))
# Plot f(B)
ggplot(elimination_func, aes(x = B, y = elimination_rate)) +
geom_line(color = "blue") +
geom_vline(xintercept = B_crit, linetype = "dashed", color = "red") +
geom_hline(yintercept = -J_N, linetype = "dashed", color = "violet") +
labs(title = "Phytoplankton Elimination Function f(B)",
x = "Turbidity B",
y = "Elimination Rate f(B)") +
theme_minimal()
##############################################################################
### Task 2: Perform Simulation ############
##############################################################################
# Define Dynamics
phytoplankton_dynamics <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
f_B <- ifelse(B <= B_crit, -f_s(B), -alpha * f_s(B))
dB <- J_N + f_B
return(list(c(dB)))
})
}
# Initial State and Time
state <- c(B = 0.1)
times <- seq(0, 20, by = 0.1)
# Simulate Dynamics
output <- ode(y = state, times = times, func = phytoplankton_dynamics,
parms = list(J_N = J_N, B_crit = B_crit, alpha = alpha))
output_df <- as.data.frame(output)
# Plot Simulation Results
ggplot(output_df, aes(x = time, y = B)) +
geom_line(color = "blue") +
geom_hline(yintercept = B_crit, linetype = "dashed", color = "red") +
labs(title = "Phytoplankton Concentration Dynamics",
x = "Time [days]",
y = "Turbidity (Phytoplankton Concentration)") +
theme_minimal()
##############################################################################
### Task 3: Generate Synthetic Data for Hysteresis ############
##############################################################################
simulate_equilibrium <- function(J_N_value, B_init = 1) {
state <- c(B = B_init)
times <- seq(0, 100, by = 0.1)
output <- ode(y = state, times = times, func = phytoplankton_dynamics,
parms = list(J_N = J_N_value, B_crit = B_crit, alpha = alpha))
tail(output[, "B"], n = 1)
}
# Sweep J_N Values
J_N_values <- seq(5, 15, by = 0.05)
equilibrium_results_from_below <- data.frame(
J_N = J_N_values,
Equilibrium_Turbidity = sapply(J_N_values, function(x) simulate_equilibrium(x, B_init = 1)),
Arm = "Increasing"
)
equilibrium_results_from_above <- data.frame(
J_N = J_N_values,
Equilibrium_Turbidity = sapply(J_N_values, function(x) simulate_equilibrium(x, B_init = 20)),
Arm = "Decreasing"
)
##############################################################################
### Task 4: Visualize and Analyze Hysteresis ############
##############################################################################
equilibrium_results <- rbind(equilibrium_results_from_below, equilibrium_results_from_above)
# Plot Hysteresis Loop
ggplot(equilibrium_results, aes(x = J_N, y = Equilibrium_Turbidity, color = Arm)) +
geom_line() +
geom_hline(yintercept = B_crit, linetype = "dashed", color = "red") +
labs(title = "Hysteresis in Water Transparency",
x = "Nutrient Input (J_N)",
y = "Equilibrium Turbidity Level") +
theme_minimal()
##############################################################################
### Interpretation of Results ############
##############################################################################
# Placeholder for detailed analysis:
# - Identify critical points where transitions occur.
# - Visualize bifurcation diagram.
library(sf)        # Für die Verarbeitung von Vektordaten
library(dplyr)     # Für die Datenmanipulation
library(ggplot2)   # Für die Visualisierung
# 1. Daten einlesen
swiss_tlm3d_path <- "C:/Users/pasca/OneDrive - ZHAW/ZHAW/2025 FS/Spatiotemporal Datascience/week-1/Week 1 Data-20250302/swiss_TLM3D.gpkg"
swiss_boundaries_path <- "C:/Users/pasca/OneDrive - ZHAW/ZHAW/2025 FS/Spatiotemporal Datascience/week-1/Week 1 Data-20250302/swissboundaries3d.gpkg"
tlm_bb <- read_sf(swiss_tlm3d_path, "tlm_bb")
cantons <- read_sf(swiss_boundaries_path, "cantons")
library(sf)        # Für die Verarbeitung von Vektordaten
library(sf)        # Für die Verarbeitung von Vektordaten
library(dplyr)     # Für die Datenmanipulation
library(ggplot2)   # Für die Visualisierung
# 1. Daten einlesen
swiss_tlm3d_path <- "C:/Users/pasca/OneDrive - ZHAW/ZHAW/2025 FS/Spatiotemporal Datascience/week-1/Week 1 Data-20250302/swiss_TLM3D.gpkg"
swiss_boundaries_path <- "C:/Users/pasca/OneDrive - ZHAW/ZHAW/2025 FS/Spatiotemporal Datascience/week-1/Week 1 Data-20250302/swissBOUNDARIES3D_1_5_LV95_LN02.gpkg"
tlm_bb <- read_sf(swiss_tlm3d_path, "tlm_bb")
cantons <- read_sf(swiss_boundaries_path, "cantons")
st_layers("C:/Users/pasca/OneDrive - ZHAW/ZHAW/2025 FS/Spatiotemporal Datascience/week-1/Week 1 Data-20250302/swissBOUNDARIES3D_1_5_LV95_LN02.gpkg")
cantons <- read_sf(swiss_boundaries_path, "tlm_kantonsgebiet")
# 2. Waldflächen extrahieren
tlm_wald <- filter(tlm_bb, objektart == "Wald")
# 3. Sicherstellen, dass CRS übereinstimmt
tlm_wald <- st_transform(tlm_wald, st_crs(cantons))
# 4. Waldfläche pro Kanton berechnen
wald_pro_kanton <- st_intersection(cantons, tlm_wald) %>%
group_by(KTNAME) %>%  # Gruppieren nach Kantonsname
summarise(Waldflaeche = sum(st_area(geometry)))
# 8. Waldanteil als Balkendiagramm visualisieren
ergebnis %>%
ggplot(aes(x = reorder(KTNAME, Waldanteil), y = Waldanteil)) +
geom_bar(stat = "identity", fill = "darkgreen") +
coord_flip() +
xlab("Kanton") +
ylab("Waldanteil (%)") +
ggtitle("Waldanteil pro Kanton") +
theme_minimal()
colnames(cantons)
library(sf)        # Für die Verarbeitung von Vektordaten
library(dplyr)     # Für die Datenmanipulation
library(ggplot2)   # Für die Visualisierung
# 1. Daten einlesen
swiss_tlm3d_path <- "C:/Users/pasca/OneDrive - ZHAW/ZHAW/2025 FS/Spatiotemporal Datascience/week-1/Week 1 Data-20250302/swiss_TLM3D.gpkg"
swiss_boundaries_path <- "C:/Users/pasca/OneDrive - ZHAW/ZHAW/2025 FS/Spatiotemporal Datascience/week-1/Week 1 Data-20250302/swissBOUNDARIES3D_1_5_LV95_LN02.gpkg"
st_layers("C:/Users/pasca/OneDrive - ZHAW/ZHAW/2025 FS/Spatiotemporal Datascience/week-1/Week 1 Data-20250302/swissBOUNDARIES3D_1_5_LV95_LN02.gpkg")
tlm_bb <- read_sf(swiss_tlm3d_path, "tlm_bb")
cantons <- read_sf(swiss_boundaries_path, "tlm_kantonsgebiet")
# 2. Waldflächen extrahieren
tlm_wald <- filter(tlm_bb, objektart == "Wald")
# 3. Sicherstellen, dass CRS übereinstimmt
tlm_wald <- st_transform(tlm_wald, st_crs(cantons))
colnames(cantons)
# 4. Waldfläche pro Kanton berechnen
wald_pro_kanton <- st_intersection(cantons, tlm_wald) %>%
group_by(name) %>%  # Use "name" instead of "KTNAME"
summarise(Waldflaeche = sum(st_area(geometry)))
# Check structure
print(colnames(wald_pro_kanton))
# 4. Waldfläche pro Kanton berechnen
wald_pro_kanton <- st_intersection(cantons, tlm_wald) %>%
group_by(name) %>%  # Use "name" instead of "KTNAME"
summarise(Waldflaeche = sum(st_area(geometry)))
library(sf)        # Für die Verarbeitung von Vektordaten
library(dplyr)     # Für die Datenmanipulation
library(ggplot2)   # Für die Visualisierung
# 1. Daten einlesen
swiss_tlm3d_path <- "C:/Users/pasca/OneDrive - ZHAW/ZHAW/2025 FS/Spatiotemporal Datascience/week-1/Week 1 Data-20250302/swiss_TLM3D.gpkg"
swiss_boundaries_path <- "C:/Users/pasca/OneDrive - ZHAW/ZHAW/2025 FS/Spatiotemporal Datascience/week-1/Week 1 Data-20250302/swissBOUNDARIES3D_1_5_LV95_LN02.gpkg"
st_layers("C:/Users/pasca/OneDrive - ZHAW/ZHAW/2025 FS/Spatiotemporal Datascience/week-1/Week 1 Data-20250302/swissBOUNDARIES3D_1_5_LV95_LN02.gpkg")
tlm_bb <- read_sf(swiss_tlm3d_path, "tlm_bb")
cantons <- read_sf(swiss_boundaries_path, "tlm_kantonsgebiet")
# 2. Waldflächen extrahieren
tlm_wald <- filter(tlm_bb, objektart == "Wald")
# 3. Sicherstellen, dass CRS übereinstimmt
tlm_wald <- st_transform(tlm_wald, st_crs(cantons))
colnames(cantons)
# 4. Waldfläche pro Kanton berechnen
wald_pro_kanton <- wald_pro_kanton %>%
group_by(name) %>%
summarise(Waldflaeche = sum(st_area(geometry), na.rm = TRUE),  # Explicitly sum areas
geometry = st_union(geometry)) %>%  # Ensure geometry stays in the result
st_as_sf()  # Convert back to an sf object
library(sf)        # Für die Verarbeitung von Vektordaten
library(dplyr)     # Für die Datenmanipulation
library(ggplot2)   # Für die Visualisierung
# 1. Daten einlesen
swiss_tlm3d_path <- "C:/Users/pasca/OneDrive - ZHAW/ZHAW/2025 FS/Spatiotemporal Datascience/week-1/Week 1 Data-20250302/swiss_TLM3D.gpkg"
swiss_boundaries_path <- "C:/Users/pasca/OneDrive - ZHAW/ZHAW/2025 FS/Spatiotemporal Datascience/week-1/Week 1 Data-20250302/swissBOUNDARIES3D_1_5_LV95_LN02.gpkg"
st_layers("C:/Users/pasca/OneDrive - ZHAW/ZHAW/2025 FS/Spatiotemporal Datascience/week-1/Week 1 Data-20250302/swissBOUNDARIES3D_1_5_LV95_LN02.gpkg")
tlm_bb <- read_sf(swiss_tlm3d_path, "tlm_bb")
cantons <- read_sf(swiss_boundaries_path, "tlm_kantonsgebiet")
# 2. Waldflächen extrahieren
tlm_wald <- filter(tlm_bb, objektart == "Wald")
# 3. Sicherstellen, dass CRS übereinstimmt
tlm_wald <- st_transform(tlm_wald, st_crs(cantons))
colnames(cantons)
# 4. Waldfläche pro Kanton berechnen
wald_pro_kanton <- wald_pro_kanton %>%
group_by(name) %>%
summarise(Waldflaeche = sum(st_area(geometry), na.rm = TRUE),  # Explicitly sum areas
geometry = st_union(geometry)) %>%  # Ensure geometry stays in the result
st_as_sf()  # Convert back to an sf object
library(sf)        # Für die Verarbeitung von Vektordaten
library(dplyr)     # Für die Datenmanipulation
library(ggplot2)   # Für die Visualisierung
# 1. Daten einlesen
swiss_tlm3d_path <- "C:/Users/pasca/OneDrive - ZHAW/ZHAW/2025 FS/Spatiotemporal Datascience/week-1/Week 1 Data-20250302/swiss_TLM3D.gpkg"
swiss_boundaries_path <- "C:/Users/pasca/OneDrive - ZHAW/ZHAW/2025 FS/Spatiotemporal Datascience/week-1/Week 1 Data-20250302/swissBOUNDARIES3D_1_5_LV95_LN02.gpkg"
tlm_bb <- read_sf(swiss_tlm3d_path, "tlm_bb")
cantons <- read_sf(swiss_boundaries_path, "tlm_kantonsgebiet")
# 2. Waldflächen extrahieren
tlm_wald <- filter(tlm_bb, objektart == "Wald")
# 3. Sicherstellen, dass CRS übereinstimmt
tlm_wald <- st_transform(tlm_wald, st_crs(cantons))
# 4. Waldfläche pro Kanton berechnen
wald_pro_kanton <- st_intersection(cantons, tlm_wald) %>%
group_by(name) %>%  # Verwende "name" als Kantonsbezeichnung
summarise(Waldflaeche = sum(st_area(geometry), na.rm = TRUE),
geometry = st_union(geometry)) %>%
st_as_sf()  # Sicherstellen, dass das Ergebnis ein sf-Objekt bleibt
library(sf)        # Für die Verarbeitung von Vektordaten
library(dplyr)     # Für die Datenmanipulation
library(ggplot2)   # Für die Visualisierung
# 1. Daten einlesen
swiss_tlm3d_path <- "C:/Users/pasca/OneDrive - ZHAW/ZHAW/2025 FS/Spatiotemporal Datascience/week-1/Week 1 Data-20250302/swiss_TLM3D.gpkg"
swiss_boundaries_path <- "C:/Users/pasca/OneDrive - ZHAW/ZHAW/2025 FS/Spatiotemporal Datascience/week-1/Week 1 Data-20250302/swissBOUNDARIES3D_1_5_LV95_LN02.gpkg"
tlm_bb <- read_sf(swiss_tlm3d_path, "tlm_bb")
cantons <- read_sf(swiss_boundaries_path, "tlm_kantonsgebiet")
# 2. Waldflächen extrahieren
tlm_wald <- filter(tlm_bb, objektart == "Wald")
# 3. Sicherstellen, dass CRS übereinstimmt
tlm_wald <- st_transform(tlm_wald, st_crs(cantons))
# 4. Waldfläche pro Kanton berechnen
wald_pro_kanton <- st_intersection(cantons, tlm_wald) %>%
mutate(area = st_area(.)) %>%  # Berechnet die Fläche jedes Schnittbereichs
group_by(name) %>%  # Verwende "name" als Kantonsbezeichnung
summarise(Waldflaeche = sum(area, na.rm = TRUE),  # Summiere die Waldflächen
geometry = st_union(geom)) %>%  # Nutze "geom" für die Geometrie
st_as_sf()  # Sicherstellen, dass das Ergebnis ein sf-Objekt bleibt
# 5. Gesamtfläche der Kantone berechnen
kantonsflaeche <- cantons %>%
mutate(Kantonflaeche = st_area(geom)) %>%
select(name, Kantonflaeche)
# 6. Prozentualen Waldanteil berechnen
ergebnis <- left_join(wald_pro_kanton, kantonsflaeche, by = "name") %>%
mutate(Waldanteil = (Waldflaeche / Kantonflaeche) * 100)
library(sf)        # Für die Verarbeitung von Vektordaten
library(dplyr)     # Für die Datenmanipulation
library(ggplot2)   # Für die Visualisierung
# 1. Daten einlesen
swiss_tlm3d_path <- "C:/Users/pasca/OneDrive - ZHAW/ZHAW/2025 FS/Spatiotemporal Datascience/week-1/Week 1 Data-20250302/swiss_TLM3D.gpkg"
swiss_boundaries_path <- "C:/Users/pasca/OneDrive - ZHAW/ZHAW/2025 FS/Spatiotemporal Datascience/week-1/Week 1 Data-20250302/swissBOUNDARIES3D_1_5_LV95_LN02.gpkg"
tlm_bb <- read_sf(swiss_tlm3d_path, "tlm_bb")
cantons <- read_sf(swiss_boundaries_path, "tlm_kantonsgebiet")
# 2. Waldflächen extrahieren
tlm_wald <- filter(tlm_bb, objektart == "Wald")
# 3. Sicherstellen, dass CRS übereinstimmt
tlm_wald <- st_transform(tlm_wald, st_crs(cantons))
# 4. Waldfläche pro Kanton berechnen
wald_pro_kanton <- st_intersection(cantons, tlm_wald) %>%
mutate(area = st_area(.)) %>%  # Berechnet die Fläche jedes Schnittbereichs
group_by(name) %>%  # Verwende "name" als Kantonsbezeichnung
summarise(Waldflaeche = sum(area, na.rm = TRUE),  # Summiere die Waldflächen
geometry = st_union(geom)) %>%  # Nutze "geom" für die Geometrie
st_as_sf()  # Sicherstellen, dass das Ergebnis ein sf-Objekt bleibt
# 5. Gesamtfläche der Kantone berechnen
kantonsflaeche <- cantons %>%
mutate(Kantonflaeche = st_area(geom)) %>%
select(name, Kantonflaeche)
# 6. Prozentualen Waldanteil berechnen
ergebnis <- left_join(wald_pro_kanton, kantonsflaeche, by = "name") %>%
mutate(Waldanteil = (Waldflaeche / Kantonflaeche) * 100)
library(sf)        # Für die Verarbeitung von Vektordaten
library(dplyr)     # Für die Datenmanipulation
library(ggplot2)   # Für die Visualisierung
# 1. Daten einlesen
swiss_tlm3d_path <- "C:/Users/pasca/OneDrive - ZHAW/ZHAW/2025 FS/Spatiotemporal Datascience/week-1/Week 1 Data-20250302/swiss_TLM3D.gpkg"
swiss_boundaries_path <- "C:/Users/pasca/OneDrive - ZHAW/ZHAW/2025 FS/Spatiotemporal Datascience/week-1/Week 1 Data-20250302/swissBOUNDARIES3D_1_5_LV95_LN02.gpkg"
tlm_bb <- read_sf(swiss_tlm3d_path, "tlm_bb")
cantons <- read_sf(swiss_boundaries_path, "tlm_kantonsgebiet")
# 2. Waldflächen extrahieren
tlm_wald <- filter(tlm_bb, objektart == "Wald")
# 3. Sicherstellen, dass CRS übereinstimmt
tlm_wald <- st_transform(tlm_wald, st_crs(cantons))
# 4. Waldfläche pro Kanton berechnen
wald_pro_kanton <- st_intersection(cantons, tlm_wald) %>%
mutate(area = st_area(.)) %>%  # Berechnet die Fläche jedes Schnittbereichs
group_by(name) %>%  # Verwende "name" als Kantonsbezeichnung
summarise(Waldflaeche = sum(area, na.rm = TRUE),  # Summiere die Waldflächen
geometry = st_union(geom)) %>%  # Nutze "geom" für die Geometrie
st_as_sf()  # Sicherstellen, dass das Ergebnis ein sf-Objekt bleibt
# 5. Gesamtfläche der Kantone berechnen
kantonsflaeche <- cantons %>%
mutate(Kantonflaeche = st_area(geom)) %>%
select(name, Kantonflaeche)
# 6. Prozentualen Waldanteil berechnen
ergebnis <- left_join(
st_drop_geometry(wald_pro_kanton),  # Entferne Geometrie vor dem Join
st_drop_geometry(kantonsflaeche),
by = "name"
) %>%
mutate(Waldanteil = (Waldflaeche / Kantonflaeche) * 100)
# 7. Visualisierung des Waldanteils als Karte
ggplot(ergebnis) +
geom_sf(aes(fill = Waldanteil), color = "black") +
scale_fill_gradient(low = "lightgreen", high = "darkgreen", name = "Waldanteil (%)") +
ggtitle("Prozentualer Waldanteil pro Kanton") +
theme_minimal()
# 8. Waldanteil als Balkendiagramm visualisieren
ergebnis %>%
ggplot(aes(x = reorder(name, Waldanteil), y = Waldanteil)) +
geom_bar(stat = "identity", fill = "darkgreen") +
coord_flip() +
xlab("Kanton") +
ylab("Waldanteil (%)") +
ggtitle("Waldanteil pro Kanton") +
theme_minimal()
library(sf)        # Für die Verarbeitung von Vektordaten
library(dplyr)     # Für die Datenmanipulation
library(ggplot2)   # Für die Visualisierung
library(units)     # Zur Konvertierung von Flächenwerten
# 1. Daten einlesen
swiss_tlm3d_path <- "C:/Users/pasca/OneDrive - ZHAW/ZHAW/2025 FS/Spatiotemporal Datascience/week-1/Week 1 Data-20250302/swiss_TLM3D.gpkg"
swiss_boundaries_path <- "C:/Users/pasca/OneDrive - ZHAW/ZHAW/2025 FS/Spatiotemporal Datascience/week-1/Week 1 Data-20250302/swissBOUNDARIES3D_1_5_LV95_LN02.gpkg"
tlm_bb <- read_sf(swiss_tlm3d_path, "tlm_bb")
cantons <- read_sf(swiss_boundaries_path, "tlm_kantonsgebiet")
# 2. Waldflächen extrahieren
tlm_wald <- filter(tlm_bb, objektart == "Wald")
# 3. Sicherstellen, dass CRS übereinstimmt
tlm_wald <- st_transform(tlm_wald, st_crs(cantons))
# 4. Waldfläche pro Kanton berechnen
wald_pro_kanton <- st_intersection(cantons, tlm_wald) %>%
mutate(area = st_area(.)) %>%  # Berechnet die Fläche jedes Schnittbereichs
group_by(name) %>%  # Verwende "name" als Kantonsbezeichnung
summarise(Waldflaeche = sum(area, na.rm = TRUE),  # Summiere die Waldflächen
geometry = st_union(geom)) %>%  # Nutze "geom" für die Geometrie
st_as_sf()  # Sicherstellen, dass das Ergebnis ein sf-Objekt bleibt
# 5. Gesamtfläche der Kantone berechnen
kantonsflaeche <- cantons %>%
mutate(Kantonflaeche = st_area(geom)) %>%
select(name, Kantonflaeche)
# 6. Prozentualen Waldanteil berechnen (mit erhaltenem Geometry)
ergebnis <- left_join(
st_drop_geometry(wald_pro_kanton),  # Entferne Geometrie vor dem Join
st_drop_geometry(kantonsflaeche),
by = "name"
) %>%
mutate(Waldanteil = as.numeric(Waldflaeche) / as.numeric(Kantonflaeche) * 100) %>% # Convert units
left_join(select(wald_pro_kanton, name, geometry), by = "name") %>% # Füge die Geometrie wieder hinzu
st_as_sf()  # Stelle sicher, dass es ein sf-Objekt bleibt
# 7. Visualisierung des Waldanteils als Karte (Geometrie jetzt wieder vorhanden)
ggplot(ergebnis) +
geom_sf(aes(fill = Waldanteil), color = "black") +
scale_fill_gradient(low = "lightgreen", high = "darkgreen", name = "Waldanteil (%)") +
ggtitle("Prozentualer Waldanteil pro Kanton") +
theme_minimal()
# 8. Waldanteil als Balkendiagramm visualisieren (ohne Einheitenproblem)
ergebnis %>%
ggplot(aes(x = reorder(name, Waldanteil), y = Waldanteil)) +
geom_bar(stat = "identity", fill = "darkgreen") +
coord_flip() +
xlab("Kanton") +
ylab("Waldanteil (%)") +
ggtitle("Waldanteil pro Kanton") +
theme_minimal()
library(sf)        # Für die Verarbeitung von Vektordaten
library(dplyr)     # Für die Datenmanipulation
library(ggplot2)   # Für die Visualisierung
library(units)     # Zur Konvertierung von Flächenwerten
# 1. Daten einlesen
swiss_tlm3d_path <- "C:/Users/pasca/OneDrive - ZHAW/ZHAW/2025 FS/Spatiotemporal Datascience/week-1/Week 1 Data-20250302/swiss_TLM3D.gpkg"
swiss_boundaries_path <- "C:/Users/pasca/OneDrive - ZHAW/ZHAW/2025 FS/Spatiotemporal Datascience/week-1/Week 1 Data-20250302/swissBOUNDARIES3D_1_5_LV95_LN02.gpkg"
tlm_bb <- read_sf(swiss_tlm3d_path, "tlm_bb")
cantons <- read_sf(swiss_boundaries_path, "tlm_kantonsgebiet")
# 2. Waldflächen extrahieren
tlm_wald <- filter(tlm_bb, objektart == "Wald")
# 3. Sicherstellen, dass CRS übereinstimmt
tlm_wald <- st_transform(tlm_wald, st_crs(cantons))
# 4. Waldfläche pro Kanton berechnen
wald_pro_kanton <- st_intersection(cantons, tlm_wald) %>%
mutate(area = st_area(.)) %>%  # Berechnet die Fläche jedes Schnittbereichs
group_by(name) %>%  # Verwende "name" als Kantonsbezeichnung
summarise(Waldflaeche = sum(area, na.rm = TRUE),  # Summiere die Waldflächen
geometry = st_union(geom)) %>%  # Nutze "geom" für die Geometrie
st_as_sf()  # Sicherstellen, dass das Ergebnis ein sf-Objekt bleibt
# 5. Gesamtfläche der Kantone berechnen
kantonsflaeche <- cantons %>%
mutate(Kantonflaeche = st_area(geom)) %>%
select(name, Kantonflaeche)
# 6. Prozentualen Waldanteil berechnen (mit erhaltenem Geometry)
ergebnis <- left_join(
st_drop_geometry(wald_pro_kanton),  # Entferne Geometrie vor dem Join
st_drop_geometry(kantonsflaeche),
by = "name"
) %>%
mutate(Waldanteil = as.numeric(Waldflaeche) / as.numeric(Kantonflaeche) * 100) %>% # Convert units
left_join(select(wald_pro_kanton, name, geometry), by = "name") %>% # Füge die Geometrie wieder hinzu
st_as_sf()  # Stelle sicher, dass es ein sf-Objekt bleibt
# 7. Visualisierung des Waldanteils als Karte (Geometrie jetzt wieder vorhanden)
ggplot(ergebnis) +
geom_sf(aes(fill = Waldanteil), color = "black") +
scale_fill_gradient(low = "lightgreen", high = "darkgreen", name = "Waldanteil (%)") +
ggtitle("Prozentualer Waldanteil pro Kanton") +
theme_minimal()
# 8. Waldanteil als Balkendiagramm visualisieren (ohne Einheitenproblem)
ergebnis %>%
ggplot(aes(x = reorder(name, Waldanteil), y = Waldanteil)) +
geom_bar(stat = "identity", fill = "darkgreen") +
coord_flip() +
xlab("Kanton") +
ylab("Waldanteil (%)") +
ggtitle("Waldanteil pro Kanton") +
theme_minimal()
# Load necessary packages
library(sf)
library(ggplot2)
library(dplyr)
# Define file paths
tlm3d_path <- "data/swisstlm3d_2025-03_2056_5728.gpkg"
boundaries_path <- "data/swissBOUNDARIES3D_1_5_LV95_LN02.gpkg"
# Load the TLM3D dataset (which contains land cover info)
tlm3d <- read_sf(tlm3d_path, "tlm_bb")
file.exists("data/swisstlm3d_2025-03_2056_5728.gpkg")
setwd("C:/Users/pasca/Desktop/STDS")
# Define file paths
tlm3d_path <- "data/swisstlm3d_2025-03_2056_5728.gpkg"
boundaries_path <- "data/swissBOUNDARIES3D_1_5_LV95_LN02.gpkg"
# Load the TLM3D dataset (which contains land cover info)
tlm3d <- read_sf(tlm3d_path, "tlm_bb")
# Define file paths
tlm3d_path <- "data/SWISSTLM3D_2025.gpkg"
boundaries_path <- "data/swissBOUNDARIES3D_1_5_LV95_LN02.gpkg"
# Load the TLM3D dataset (which contains land cover info)
tlm3d <- read_sf(tlm3d_path, "tlm_bb")
# Define file paths
tlm3d_path <- "data/SWISSTLM3D_2025.gpkg"
boundaries_path <- "data/swissBOUNDARIES3D_1_5_LV95_LN02.gpkg"
# Load the TLM3D dataset (which contains land cover info)
tlm3d <- read_sf(tlm3d_path, "tlm_bb")
st_layers("data/SWISSTLM3D_2025.gpkg")
